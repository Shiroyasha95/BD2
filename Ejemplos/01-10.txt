SET SERVEROUTPUT ON

DECLARE 
    empl EMPLOYEES%ROWTYPE;
BEGIN

    SELECT * INTO empl FROM EMPLOYEES WHERE EMPLOYEE_ID > 1;
    dbms_output.put_line(empl.first_name);

EXCEPTION
    WHEN NO_DATA_FOUND THEN
        dbms_output.put_line('DATOS NO ENCONTRADOS');
    WHEN TOO_MANY_ROWS THEN
        dbms_output.put_line('MAS DE UNA FILA RETORNADA');
    WHEN OTHERS THEN
        dbms_output.put_line('ERROR INESPERADO');
END;

-------------------------

DECLARE
    --CREANDO NUESTRA EXCECION PERSONALIZADA
    MI_EXCEP EXCEPTION;
    PRAGMA EXCEPTION_INIT(MI_EXCEP,-937);
    
    X1 NUMBER;
    X2 NUMBER;

BEGIN

    SELECT EMPLOYEE_ID, SUM(SALARY) INTO X1,X2 FROM EMPLOYEES;
    
EXCEPTION
    WHEN MI_EXCEP THEN
        dbms_output.put_line('Funci n de grupo incorrecta');
    WHEN OTHERS THEN 
        dbms_output.put_line('Error inesperado');

END;

------------------------

CREATE TABLE ERROR
(
    CODIGO NUMBER
        CONSTRAINT ERRORS_CODE_NN NOT NULL,
    MENSAJE VARCHAR2(200)
);

DECLARE 
    empl EMPLOYEES%ROWTYPE;
    CODE NUMBER;
    MESSAGE VARCHAR2(256);
BEGIN

    SELECT * INTO empl FROM EMPLOYEES;
    dbms_output.put_line(empl.first_name);

EXCEPTION
    WHEN OTHERS THEN
        dbms_output.put_line(SQLCODE);
        dbms_output.put_line(SQLERRM);
        CODE:=SQLCODE;
        MESSAGE:= SQLERRM;
        INSERT INTO ERROR VALUES (CODE, MESSAGE);
END;

---------------------------


CREATE TABLE ERROR
(
    CODIGO NUMBER
        CONSTRAINT ERRORS_CODE_NN NOT NULL,
    MENSAJE VARCHAR2(200)
);

DECLARE 
    REGIONC NUMBER;
    REGIONN VARCHAR2(256);
BEGIN
    REGIONC:=101;
    REGIONN:='TEST REGION';
    IF REGIONC > 100 THEN
        RAISE_APPLICATION_ERROR(-20001, 'EL ID NO PUEDE SER MAYOR A 100');
    ELSE
    INSERT INTO REGIONS VALUES (REGIONC, REGIONN);
    END IF;
    dbms_output.put_line('ERROR INESPERADO');
END;

----------------------

DECLARE 
    CURSOR C1 IS SELECT * FROM REGIONS;
    V1 REGIONS%ROWTYPE;
BEGIN
    OPEN C1;
    LOOP
    FETCH C1 INTO V1;
    EXIT WHEN C1%NOTFOUND;
    dbms_output.put_line(V1.REGION_NAME);
    END LOOP;
    CLOSE C1;
END;

-- PODEMOS OMITIR LA DECLARACION
--DECLARE 
--    CURSOR C1 IS SELECT * FROM REGIONS;
 --   V1 REGIONS%ROWTYPE;
BEGIN
    FOR i IN (SELECT * FROM REGIONS) LOOP
        dbms_output.put_line(i.REGION_NAME);
    END LOOP;
END;

SET SERVEROUTPUT ON
DECLARE 
    CURSOR C1(SALARIO NUMBER) IS -- LE PASAMOS PARAMETROS AL CURSOR
    SELECT * FROM EMPLOYEES WHERE SALARY > SALARIO;
    EMPL EMPLOYEES%ROWTYPE;
BEGIN
    FOR i IN C1(10000) LOOP
        dbms_output.put_line(i.FIRST_NAME || ' <-> ' || i.SALARY);
    END LOOP;
END;
--------------------------

SET SERVEROUTPUT ON
DECLARE 
    CURSOR CUR IS SELECT * FROM EMPLOYEES FOR UPDATE;
    EMPL EMPLOYEES%ROWTYPE;
BEGIN
    OPEN CUR;
    LOOP
        FETCH CUR INTO EMPL;
        EXIT WHEN CUR%NOTFOUND;
        IF EMPL.COMMISSION_PCT IS NOT NULL THEN 
            UPDATE EMPLOYEES SET SALARY=SALARY*1.10 WHERE CURRENT OF CUR;
        ELSE
            dbms_output.put_line('ERROR INESPERADO');
        END IF;
    END LOOP;
END;

-----------------------
--REPLACE REEMPLAZA EL PROCEDIMIENTO SI YA EXISTE
--EL PROCEDIMIENTO SE PUEDE CREAR SOLO CON EL CREATE SIN EL REPLACE 
CREATE OR REPLACE PROCEDURE PR1
IS
    X NUMBER:=10;
BEGIN
    dbms_output.put_line(X);
END;

-- LOS PROCEDIMIENTO SE LLAMAN DESDE OTRO LADO PARA EJECUTARSE.
BEGIN
    PR1;
END;

SELECT * FROM USER_OBJECTS WHERE OBJECT_TYPE='PROCEDURE';

SELECT TEXT FROM USER_SOURCE WHERE NAME='PR1';

------------------------

SET SERVEROUTPUT ON
-- LOS PARAMETROS DE ENTRADA SON SOLO DE LECTURAS
CREATE OR REPLACE PROCEDURE CAL_TAX
(EMPL IN EMPLOYEES.EMPLOYEE_ID%TYPE, T1 IN NUMBER, R1 OUT NUMBER)
IS
    TAX NUMBER:=0;
    SALARIO EMPLOYEES.SALARY%TYPE:=0;
BEGIN
    SELECT SALARY INTO SALARIO FROM EMPLOYEES WHERE EMPLOYEE_ID=EMPL;
    R1:=SALARIO*T1/100;
    dbms_output.put_line('SALARIO: '|| SALARIO);
    dbms_output.put_line('IMPUESTO (R1): '|| R1);
    
    EXCEPTION
        WHEN NO_DATA_FOUND THEN
            dbms_output.put_line('DATOS NO ENCONTRADOS');
END;

SET SERVEROUTPUT ON
DECLARE
    A NUMBER:=120;
    B NUMBER:=5;
    R NUMBER:=0; --SIEMPRE ES CERO EN LA VARIABLE DE SALIDA
BEGIN
    dbms_output.put_line('R [INICIAL]: '|| R);
    CAL_TAX(A,B,R);
    dbms_output.put_line('R [DESPUES DE ENTRAR AL PROCEDIMIENTO]: '|| R);
END;


-------------------------

SET SERVEROUTPUT ON
-- LOS PARAMETROS DE ENTRADA-SALIDA SI PUEDEN TENER UNA ASIGNACI N
CREATE OR REPLACE PROCEDURE CAL_TAX
(EMPL IN EMPLOYEES.EMPLOYEE_ID%TYPE, T1 IN OUT NUMBER)
IS
    TAX NUMBER:=0;
    SALARIO EMPLOYEES.SALARY%TYPE:=0;
BEGIN
    SELECT SALARY INTO SALARIO FROM EMPLOYEES WHERE EMPLOYEE_ID=EMPL;
    T1:=SALARIO*T1/100;
    dbms_output.put_line('SALARIO: '|| SALARIO);
    dbms_output.put_line('IMPUESTO (T1): '|| T1);
    
    EXCEPTION
        WHEN NO_DATA_FOUND THEN
            dbms_output.put_line('DATOS NO ENCONTRADOS');
END;

SET SERVEROUTPUT ON
DECLARE
    A NUMBER:=120;
    B NUMBER:=5;
BEGIN
    dbms_output.put_line('B [ANTES DE ENTRAR AL PROCEDIMIENTO]: '|| B);
    CAL_TAX(A,B);
    dbms_output.put_line('B [ES T1]: '|| B);
END;

-----------------

SET SERVEROUTPUT ON
-- LOS PARAMETROS DE ENTRADA-SALIDA SI PUEDEN TENER UNA ASIGNACI N
/*
    DIFERENCIA ENTRE UN PROCEDIMINETO Y UNA FUNCION
    FUNCION: RETORNA LOS PARAMETROS.
    PROCEDIMIENTO: NO SE HACE UN RETORNO.

*/
CREATE OR REPLACE PROCEDURE VISUALIZAR
IS
    CURSOR C1 IS SELECT FIRST_NAME, SALARY FROM EMPLOYEES;
BEGIN
    FOR i IN C1 LOOP
    dbms_output.put_line(i.FIRST_NAME || '  ->  ' || i.SALARY);
    END LOOP;
    EXCEPTION
        WHEN NO_DATA_FOUND THEN
            dbms_output.put_line('DATOS NO ENCONTRADOS');
END;

EXECUTE VISUALIZAR;

-----------------------

SET SERVEROUTPUT ON
-- FUNCIONES
/*
    DIFERENCIA ENTRE UN PROCEDIMINETO Y UNA FUNCION
    FUNCION: RETORNA LOS PARAMETROS.
    PROCEDIMIENTO: NO SE HACE UN RETORNO.

*/
CREATE OR REPLACE FUNCTION CALC_TAX(EMPL IN EMPLOYEES.EMPLOYEE_ID%TYPE, T1 NUMBER) 
RETURN NUMBER
IS
    TAX NUMBER:=0;
    SALARIO EMPLOYEES.SALARY%TYPE:=0;
BEGIN
    SELECT SALARY INTO SALARIO FROM EMPLOYEES WHERE EMPLOYEE_ID=EMPL;
    TAX:=SALARIO*T1/100;
    RETURN TAX;
END;

SET SERVEROUTPUT ON
DECLARE
    A NUMBER:=120;
    B NUMBER:=5;
    R NUMBER;
BEGIN
    R:=CALC_TAX(A,B);
    dbms_output.put_line('R: '|| R);
END;

------------------
--PAQUETES

SET SERVEROUTPUT ON
CREATE OR REPLACE PACKAGE PACK1
IS
    PROCEDURE CONVERTIR_CADENA (NOMBRE VARCHAR2, TIPO_CONV CHAR);
    FUNCTION FN_CONVERTIR  (NOMBRE VARCHAR2, TIPO_CONV CHAR) RETURN VARCHAR2;
END; --ESTO ES LA ESPECIFICAION DEL PAQUETE, CON SUS FUNCIONES Y/O PROCEDIMINETO QUE SON GLOBALES

CREATE OR REPLACE PACKAGE BODY PACK1 
-- ESTO ES EL CUERPO DEL PAQUETE, AC  PODEMOS CREAR NUEVAS FUNCIONES O PORCEDIMIENTOS,
-- PERO ESTOS SOLO PUEDEN SER UTILIZADO EN EL CUERPO DEL PAQUETE
IS
FUNCTION UP(NOMBRE VARCHAR2)
RETURN VARCHAR2
IS
BEGIN
    RETURN UPPER(NOMBRE);
END UP;

FUNCTION DO (NOMBRE VARCHAR2)
RETURN VARCHAR2
IS
BEGIN
    RETURN LOWER(NOMBRE);
END DO;

PROCEDURE CONVERTIR_CADENA (NOMBRE VARCHAR2, TIPO_CONV CHAR)
IS
BEGIN
    IF TIPO_CONV='MAY' THEN
        DBMS_OUTPUT.PUT_LINE(UP(NOMBRE));
    ELSIF TIPO_CONV='MIN' THEN
        DBMS_OUTPUT.PUT_LINE(DO(NOMBRE));
    ELSE
        DBMS_OUTPUT.PUT_LINE('EL PAR METRO DEBE SER MAY O MIN');
    END IF;
END CONVERTIR_CADENA;

FUNCTION FN_CONVERTIR  (NOMBRE VARCHAR2, TIPO_CONV CHAR) 
RETURN VARCHAR2
IS
BEGIN
    IF TIPO_CONV='MAY' THEN
        RETURN(UP(NOMBRE));
    ELSIF TIPO_CONV='MIN' THEN
        RETURN(DO(NOMBRE));
    ELSE
        DBMS_OUTPUT.PUT_LINE('EL PAR METRO DEBE SER MAY O MIN');
    END IF;
END FN_CONVERTIR;

END PACK1;

SET SERVEROUTPUT ON
DECLARE
    A VARCHAR2(100);
BEGIN
    A:=PACK1.FN_CONVERTIR('hola','MAY');
    DBMS_OUTPUT.PUT_LINE(A);
    PACK1.CONVERTIR_CADENA('HI HOW ARE YA?','MIN');
END;
